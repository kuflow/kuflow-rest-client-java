//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
//

package com.kuflow.rest.client.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.kuflow.rest.client.models.DefaultErrorException;
import com.kuflow.rest.client.models.Principal;
import com.kuflow.rest.client.models.PrincipalPage;
import com.kuflow.rest.client.models.PrincipalType;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in PrincipalOperations. */
public final class PrincipalOperationsImpl {
    /** The proxy service used to perform REST calls. */
    private final PrincipalOperationsService service;

    /** The service client containing this operation class. */
    private final KuFlowClientImpl client;

    /**
     * Initializes an instance of PrincipalOperationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    PrincipalOperationsImpl(KuFlowClientImpl client) {
        this.service =
                RestProxy.create(
                        PrincipalOperationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for KuFlowClientPrincipalOperations to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "KuFlowClientPrincipa")
    public interface PrincipalOperationsService {
        @Get("/principals")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorException.class)
        Mono<Response<PrincipalPage>> findPrincipals(
                @HostParam("$host") String host,
                @QueryParam("size") Integer size,
                @QueryParam("page") Integer page,
                @QueryParam("sort") String sort,
                @QueryParam("type") PrincipalType type,
                @QueryParam("groupId") String groupId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/principals")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorException.class)
        Response<PrincipalPage> findPrincipalsSync(
                @HostParam("$host") String host,
                @QueryParam("size") Integer size,
                @QueryParam("page") Integer page,
                @QueryParam("sort") String sort,
                @QueryParam("type") PrincipalType type,
                @QueryParam("groupId") String groupId,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/principals/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorException.class)
        Mono<Response<Principal>> retrievePrincipal(
                @HostParam("$host") String host,
                @PathParam("id") UUID id,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/principals/{id}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(DefaultErrorException.class)
        Response<Principal> retrievePrincipalSync(
                @HostParam("$host") String host,
                @PathParam("id") UUID id,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @param size The number of records returned within a single API call.
     * @param page The page number of the current page in the returned records, 0 is the first page.
     * @param sort Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
     *     <p>Default sort order is ascending. Multiple sort criteria are supported.
     *     <p>Please refer to the method description for supported properties.
     * @param type Filter principals by type.
     * @param groupId Filter principals that exists in one of group ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PrincipalPage>> findPrincipalsWithResponseAsync(
            Integer size, Integer page, List<String> sort, PrincipalType type, List<UUID> groupId) {
        final String accept = "application/json";
        String sortConverted =
                (sort == null)
                        ? null
                        : sort.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        String groupIdConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(groupId, CollectionFormat.CSV);
        return FluxUtil.withContext(
                context ->
                        service.findPrincipals(
                                this.client.getHost(),
                                size,
                                page,
                                sortConverted,
                                type,
                                groupIdConverted,
                                accept,
                                context));
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @param size The number of records returned within a single API call.
     * @param page The page number of the current page in the returned records, 0 is the first page.
     * @param sort Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
     *     <p>Default sort order is ascending. Multiple sort criteria are supported.
     *     <p>Please refer to the method description for supported properties.
     * @param type Filter principals by type.
     * @param groupId Filter principals that exists in one of group ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PrincipalPage>> findPrincipalsWithResponseAsync(
            Integer size, Integer page, List<String> sort, PrincipalType type, List<UUID> groupId, Context context) {
        final String accept = "application/json";
        String sortConverted =
                (sort == null)
                        ? null
                        : sort.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        String groupIdConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(groupId, CollectionFormat.CSV);
        return service.findPrincipals(
                this.client.getHost(), size, page, sortConverted, type, groupIdConverted, accept, context);
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @param size The number of records returned within a single API call.
     * @param page The page number of the current page in the returned records, 0 is the first page.
     * @param sort Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
     *     <p>Default sort order is ascending. Multiple sort criteria are supported.
     *     <p>Please refer to the method description for supported properties.
     * @param type Filter principals by type.
     * @param groupId Filter principals that exists in one of group ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrincipalPage> findPrincipalsAsync(
            Integer size, Integer page, List<String> sort, PrincipalType type, List<UUID> groupId) {
        return findPrincipalsWithResponseAsync(size, page, sort, type, groupId)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrincipalPage> findPrincipalsAsync() {
        final Integer size = null;
        final Integer page = null;
        final List<String> sort = null;
        final PrincipalType type = null;
        final List<UUID> groupId = null;
        return findPrincipalsWithResponseAsync(size, page, sort, type, groupId)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @param size The number of records returned within a single API call.
     * @param page The page number of the current page in the returned records, 0 is the first page.
     * @param sort Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
     *     <p>Default sort order is ascending. Multiple sort criteria are supported.
     *     <p>Please refer to the method description for supported properties.
     * @param type Filter principals by type.
     * @param groupId Filter principals that exists in one of group ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PrincipalPage> findPrincipalsAsync(
            Integer size, Integer page, List<String> sort, PrincipalType type, List<UUID> groupId, Context context) {
        return findPrincipalsWithResponseAsync(size, page, sort, type, groupId, context)
                .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @param size The number of records returned within a single API call.
     * @param page The page number of the current page in the returned records, 0 is the first page.
     * @param sort Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
     *     <p>Default sort order is ascending. Multiple sort criteria are supported.
     *     <p>Please refer to the method description for supported properties.
     * @param type Filter principals by type.
     * @param groupId Filter principals that exists in one of group ids.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PrincipalPage> findPrincipalsWithResponse(
            Integer size, Integer page, List<String> sort, PrincipalType type, List<UUID> groupId, Context context) {
        final String accept = "application/json";
        String sortConverted =
                (sort == null)
                        ? null
                        : sort.stream().map(value -> Objects.toString(value, "")).collect(Collectors.joining(","));
        String groupIdConverted =
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(groupId, CollectionFormat.CSV);
        return service.findPrincipalsSync(
                this.client.getHost(), size, page, sortConverted, type, groupIdConverted, accept, context);
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @param size The number of records returned within a single API call.
     * @param page The page number of the current page in the returned records, 0 is the first page.
     * @param sort Sorting criteria in the format: property{,asc|desc}. Example: createdAt,desc
     *     <p>Default sort order is ascending. Multiple sort criteria are supported.
     *     <p>Please refer to the method description for supported properties.
     * @param type Filter principals by type.
     * @param groupId Filter principals that exists in one of group ids.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrincipalPage findPrincipals(
            Integer size, Integer page, List<String> sort, PrincipalType type, List<UUID> groupId) {
        return findPrincipalsWithResponse(size, page, sort, type, groupId, Context.NONE).getValue();
    }

    /**
     * Find all accessible Principals
     *
     * <p>List all the Principals that have been created and the used credentials has access.
     *
     * <p>Available sort query values: id, name.
     *
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PrincipalPage findPrincipals() {
        final Integer size = null;
        final Integer page = null;
        final List<String> sort = null;
        final PrincipalType type = null;
        final List<UUID> groupId = null;
        return findPrincipalsWithResponse(size, page, sort, type, groupId, Context.NONE).getValue();
    }

    /**
     * Get a Principal by ID
     *
     * <p>Returns the requested Principal when has access to do it.
     *
     * @param id The resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Principal>> retrievePrincipalWithResponseAsync(UUID id) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.retrievePrincipal(this.client.getHost(), id, accept, context));
    }

    /**
     * Get a Principal by ID
     *
     * <p>Returns the requested Principal when has access to do it.
     *
     * @param id The resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Principal>> retrievePrincipalWithResponseAsync(UUID id, Context context) {
        final String accept = "application/json";
        return service.retrievePrincipal(this.client.getHost(), id, accept, context);
    }

    /**
     * Get a Principal by ID
     *
     * <p>Returns the requested Principal when has access to do it.
     *
     * @param id The resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Principal> retrievePrincipalAsync(UUID id) {
        return retrievePrincipalWithResponseAsync(id).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Principal by ID
     *
     * <p>Returns the requested Principal when has access to do it.
     *
     * @param id The resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Principal> retrievePrincipalAsync(UUID id, Context context) {
        return retrievePrincipalWithResponseAsync(id, context).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Principal by ID
     *
     * <p>Returns the requested Principal when has access to do it.
     *
     * @param id The resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Principal> retrievePrincipalWithResponse(UUID id, Context context) {
        final String accept = "application/json";
        return service.retrievePrincipalSync(this.client.getHost(), id, accept, context);
    }

    /**
     * Get a Principal by ID
     *
     * <p>Returns the requested Principal when has access to do it.
     *
     * @param id The resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws DefaultErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Principal retrievePrincipal(UUID id) {
        return retrievePrincipalWithResponse(id, Context.NONE).getValue();
    }
}
