//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
//

package com.kuflow.rest.client.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.kuflow.rest.client.util.TaskHelper;
import java.time.LocalDate;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import javax.annotation.Nonnull;
import reactor.util.annotation.Nullable;

/** The Task model. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "@odata\\.type")
@JsonTypeName("#KuFlow.Rest.Task")
@JsonFlatten
@Fluent
public class Task extends AbstractAudited {
    /*
     * The id property.
     */
    @JsonProperty(value = "id")
    private UUID id;

    /*
     * Task state
     */
    @JsonProperty(value = "state")
    private TaskState state;

    /*
     * In creation task, one of 'id, version or code' is mandatory.
     */
    @JsonProperty(value = "taskDefinition", required = true)
    private TasksDefinitionSummary taskDefinition;

    /*
     * The processId property.
     */
    @JsonProperty(value = "processId", required = true)
    private UUID processId;

    /*
     * An ElementValueDocument or an array of ElementValueDocument is not allowed in any type of requests.
     */
    @JsonProperty(value = "elementValues")
    private Map<String, List<TaskElementValue>> elementValues;

    /*
     * The logs property.
     */
    @JsonProperty(value = "logs", access = JsonProperty.Access.WRITE_ONLY)
    private List<Log> logs;

    /*
     * The owner property.
     */
    @JsonProperty(value = "owner")
    private Principal owner;

    /** Creates an instance of Task class. */
    public Task() {}

    /**
     * Get the id property: The id property.
     *
     * @return the id value.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Set the id property: The id property.
     *
     * @param id the id value to set.
     * @return the Task object itself.
     */
    public Task setId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get the state property: Task state.
     *
     * @return the state value.
     */
    public TaskState getState() {
        return this.state;
    }

    /**
     * Set the state property: Task state.
     *
     * @param state the state value to set.
     * @return the Task object itself.
     */
    public Task setState(TaskState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the taskDefinition property: In creation task, one of 'id, version or code' is mandatory.
     *
     * @return the taskDefinition value.
     */
    public TasksDefinitionSummary getTaskDefinition() {
        return this.taskDefinition;
    }

    /**
     * Set the taskDefinition property: In creation task, one of 'id, version or code' is mandatory.
     *
     * @param taskDefinition the taskDefinition value to set.
     * @return the Task object itself.
     */
    public Task setTaskDefinition(TasksDefinitionSummary taskDefinition) {
        this.taskDefinition = taskDefinition;
        return this;
    }

    /**
     * Get the processId property: The processId property.
     *
     * @return the processId value.
     */
    public UUID getProcessId() {
        return this.processId;
    }

    /**
     * Set the processId property: The processId property.
     *
     * @param processId the processId value to set.
     * @return the Task object itself.
     */
    public Task setProcessId(UUID processId) {
        this.processId = processId;
        return this;
    }

    /**
     * Get the elementValues property: An ElementValueDocument or an array of ElementValueDocument is not allowed in any
     * type of requests.
     *
     * @return the elementValues value.
     */
    public Map<String, List<TaskElementValue>> getElementValues() {
        return this.elementValues;
    }

    /**
     * Set the elementValues property: An ElementValueDocument or an array of ElementValueDocument is not allowed in any
     * type of requests.
     *
     * @param elementValues the elementValues value to set.
     * @return the Task object itself.
     */
    public Task setElementValues(Map<String, List<TaskElementValue>> elementValues) {
        this.elementValues = elementValues;
        return this;
    }

    /**
     * Get the logs property: The logs property.
     *
     * @return the logs value.
     */
    public List<Log> getLogs() {
        return this.logs;
    }

    /**
     * Get the owner property: The owner property.
     *
     * @return the owner value.
     */
    public Principal getOwner() {
        return this.owner;
    }

    /**
     * Set the owner property: The owner property.
     *
     * @param owner the owner value to set.
     * @return the Task object itself.
     */
    public Task setOwner(Principal owner) {
        this.owner = owner;
        return this;
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValue(@Nonnull String elementDefinitionCode, @Nullable String elementValue) {
        return TaskHelper.putElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValues Element values
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValues(@Nonnull String elementDefinitionCode, @Nullable String... elementValues) {
        return TaskHelper.putElementValues(this, elementDefinitionCode, (Object[]) elementValues);
    }

    /**
     * Add a new element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    public Task addElementValue(@Nonnull String elementDefinitionCode, @Nullable String elementValue) {
        return TaskHelper.addElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Get an element as String
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value.
     * @throws com.kuflow.rest.client.KuFlowRestClientException com.kuflow.rest.client.KuFlowRestClientException If
     *     element value doesn't exists
     */
    @Nonnull
    public String getElementValueAsString(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsString(this, elementDefinitionCode);
    }

    /**
     * Get all elements as String
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the elements values.
     */
    @Nonnull
    public List<String> getElementValueAsStringList(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsStringList(this, elementDefinitionCode);
    }

    /**
     * Try to get an element as String
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value if exists.
     */
    @Nonnull
    public Optional<String> findElementValueAsString(@Nonnull String elementDefinitionCode) {
        return TaskHelper.findElementValueAsString(this, elementDefinitionCode);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValue(@Nonnull String elementDefinitionCode, @Nullable Double elementValue) {
        return TaskHelper.putElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValues Element values
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValues(@Nonnull String elementDefinitionCode, @Nullable Double... elementValues) {
        return TaskHelper.putElementValues(this, elementDefinitionCode, (Object[]) elementValues);
    }

    /**
     * Add a new element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    public Task addElementValue(@Nonnull String elementDefinitionCode, @Nullable Double elementValue) {
        return TaskHelper.addElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Get an element as Double
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value.
     * @throws com.kuflow.rest.client.KuFlowRestClientException com.kuflow.rest.client.KuFlowRestClientException If
     *     element value doesn't exists
     */
    @Nonnull
    public Double getElementValueAsDouble(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsDouble(this, elementDefinitionCode);
    }

    /**
     * Get all elements as Double
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the elements values.
     */
    @Nonnull
    public List<Double> getElementValueAsDoubleList(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsDoubleList(this, elementDefinitionCode);
    }

    /**
     * Try to get an element as Double
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value if exists.
     */
    @Nonnull
    public Optional<Double> findElementValueAsDouble(@Nonnull String elementDefinitionCode) {
        return TaskHelper.findElementValueAsDouble(this, elementDefinitionCode);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValue(@Nonnull String elementDefinitionCode, @Nullable LocalDate elementValue) {
        return TaskHelper.putElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValues Element values
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValues(@Nonnull String elementDefinitionCode, @Nullable LocalDate... elementValues) {
        return TaskHelper.putElementValues(this, elementDefinitionCode, (Object[]) elementValues);
    }

    /**
     * Add a new element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    public Task addElementValue(@Nonnull String elementDefinitionCode, @Nullable LocalDate elementValue) {
        return TaskHelper.addElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Get an element as LocalDate
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value.
     * @throws com.kuflow.rest.client.KuFlowRestClientException com.kuflow.rest.client.KuFlowRestClientException If
     *     element value doesn't exists
     */
    @Nonnull
    public LocalDate getElementValueAsLocalDate(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsLocalDate(this, elementDefinitionCode);
    }

    /**
     * Get all elements as LocalDate
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the elements values.
     */
    @Nonnull
    public List<LocalDate> getElementValueAsLocalDateList(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsLocalDateList(this, elementDefinitionCode);
    }

    /**
     * Try to get an element as LocalDate
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value if exists.
     */
    @Nonnull
    public Optional<LocalDate> findElementValueAsLocalDate(@Nonnull String elementDefinitionCode) {
        return TaskHelper.findElementValueAsLocalDate(this, elementDefinitionCode);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValue(@Nonnull String elementDefinitionCode, @Nullable Map<String, Object> elementValue) {
        return TaskHelper.putElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValues Element values
     * @return the Task object itself.
     */
    @Nonnull
    @SafeVarargs
    public final Task putElementValues(
            @Nonnull String elementDefinitionCode, @Nullable Map<String, Object>... elementValues) {
        return TaskHelper.putElementValues(this, elementDefinitionCode, (Object[]) elementValues);
    }

    /**
     * Add a new element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    public Task addElementValue(@Nonnull String elementDefinitionCode, @Nullable Map<String, Object> elementValue) {
        return TaskHelper.addElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Get an element as Map
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value.
     * @throws com.kuflow.rest.client.KuFlowRestClientException com.kuflow.rest.client.KuFlowRestClientException If
     *     element value doesn't exists
     */
    @Nonnull
    public Map<String, Object> getElementValueAsMap(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsMap(this, elementDefinitionCode);
    }

    /**
     * Get all elements as Map
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the elements values.
     */
    @Nonnull
    public List<Map<String, Object>> getElementValueAsMapList(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsMapList(this, elementDefinitionCode);
    }

    /**
     * Try to get an element as Map
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value if exists.
     */
    @Nonnull
    public Optional<Map<String, Object>> findElementValueAsMap(@Nonnull String elementDefinitionCode) {
        return TaskHelper.findElementValueAsMap(this, elementDefinitionCode);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValue(
            @Nonnull String elementDefinitionCode, @Nullable TaskElementValueDocumentItem elementValue) {
        return TaskHelper.putElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValues Element values
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValues(
            @Nonnull String elementDefinitionCode, @Nullable TaskElementValueDocumentItem... elementValues) {
        return TaskHelper.putElementValues(this, elementDefinitionCode, (Object[]) elementValues);
    }

    /**
     * Add a new element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    public Task addElementValue(
            @Nonnull String elementDefinitionCode, @Nullable TaskElementValueDocumentItem elementValue) {
        return TaskHelper.addElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Get an element as Document
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value.
     * @throws com.kuflow.rest.client.KuFlowRestClientException com.kuflow.rest.client.KuFlowRestClientException If
     *     element value doesn't exists
     */
    @Nonnull
    public TaskElementValueDocumentItem getElementValueAsDocument(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsDocument(this, elementDefinitionCode);
    }

    /**
     * Get all elements as Document
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the elements values.
     */
    @Nonnull
    public List<TaskElementValueDocumentItem> getElementValueAsDocumentList(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsDocumentList(this, elementDefinitionCode);
    }

    /**
     * Try to get an element as Document
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value if exists.
     */
    @Nonnull
    public Optional<TaskElementValueDocumentItem> findElementValueAsDocument(@Nonnull String elementDefinitionCode) {
        return TaskHelper.findElementValueAsDocument(this, elementDefinitionCode);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValue(
            @Nonnull String elementDefinitionCode, @Nullable TaskElementValuePrincipalItem elementValue) {
        return TaskHelper.putElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Set an element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValues Element values
     * @return the Task object itself.
     */
    @Nonnull
    public Task putElementValues(
            @Nonnull String elementDefinitionCode, @Nullable TaskElementValuePrincipalItem... elementValues) {
        return TaskHelper.putElementValues(this, elementDefinitionCode, (Object[]) elementValues);
    }

    /**
     * Add a new element value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param elementValue Element value
     * @return the Task object itself.
     */
    public Task addElementValue(
            @Nonnull String elementDefinitionCode, @Nullable TaskElementValuePrincipalItem elementValue) {
        return TaskHelper.addElementValue(this, elementDefinitionCode, elementValue);
    }

    /**
     * Get an element as Principal
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value.
     * @throws com.kuflow.rest.client.KuFlowRestClientException com.kuflow.rest.client.KuFlowRestClientException If
     *     element value doesn't exists
     */
    @Nonnull
    public TaskElementValuePrincipalItem getElementValueAsPrincipal(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsPrincipal(this, elementDefinitionCode);
    }

    /**
     * Get all elements as Principal
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the elements values.
     */
    @Nonnull
    public List<TaskElementValuePrincipalItem> getElementValueAsPrincipalList(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueAsPrincipalList(this, elementDefinitionCode);
    }

    /**
     * Try to get an element as Principal
     *
     * @param elementDefinitionCode Element Definition Code
     * @return the element value if exists.
     */
    @Nonnull
    public Optional<TaskElementValuePrincipalItem> findElementValueAsPrincipal(@Nonnull String elementDefinitionCode) {
        return TaskHelper.findElementValueAsPrincipal(this, elementDefinitionCode);
    }

    /**
     * Check if all related valid values are TRUE
     *
     * @param elementDefinitionCode Element Definition Code
     * @return TRUE if all related valid values are TRUE else FALSE.
     */
    @Nullable
    public Boolean getElementValueValid(@Nonnull String elementDefinitionCode) {
        return TaskHelper.getElementValueValid(this, elementDefinitionCode);
    }

    /**
     * Check if all related valid values are TRUE
     *
     * @param elementDefinitionCode Element Definition Code
     * @param index Element value index
     * @return The requested valid value
     */
    @Nullable
    public Boolean getElementValueValidAt(@Nonnull String elementDefinitionCode, int index) {
        return TaskHelper.getElementValueValidAt(this, elementDefinitionCode, index);
    }

    /**
     * Set valid to all values
     *
     * @param elementDefinitionCode Element Definition Code
     * @param valid Valid value
     * @return the Task object itself.
     */
    @Nonnull
    public Task setElementValueValid(@Nonnull String elementDefinitionCode, Boolean valid) {
        return TaskHelper.setElementValueValid(this, elementDefinitionCode, valid);
    }

    /**
     * Set valid to the selected value
     *
     * @param elementDefinitionCode Element Definition Code
     * @param valid Valid value
     * @param index Element value index
     * @return the Task object itself.
     */
    @Nullable
    public Task setElementValueValidAt(@Nonnull String elementDefinitionCode, @Nullable Boolean valid, int index) {
        return TaskHelper.setElementValueValidAt(this, elementDefinitionCode, valid, index);
    }
}
